set program = ""
set ppvar = 0

func print_program
	set letter = $program at $ppvar
	set ppvar += 1

	set_tile $ppvar 16 $letter "-"
	
	set length = len $program
	if $ppvar < $length
		call print_program
	else
		set ppvar = 0

touch 22 5
	set program += ">"
	call print_program

touch 24 5
	set program += "<"
	call print_program

touch 26 5
	set program += "+"
	call print_program

touch 28 5
	set program += "-"
	call print_program

touch 30 5
	set program += "["
	call print_program

touch 32 5
	set program += "]"
	call print_program

touch 34 5
	set program += ","
	call print_program


// --- DELETE ---
touch 41 5
	call del
touch 42 5
	call del
touch 43 5
	call del

func del
	set length = len $program

	set ppvar += 1
	if $ppvar <= $length
		set_tile $ppvar 16 " " " "
		call del
	else
		set program = ""
		set ppvar = 0

// --- ENTER ---
touch 41 7
	call start_program
touch 42 7
	call start_program
touch 43 7
	call start_program
touch 44 7
	call start_program
touch 45 7
	call start_program

// --- PRINT (fake) STDOUT ---
func print_stdout
	set letter = $stdout at $ppvar
	set ppvar += 1

	set_tile $ppvar 16 $letter "-"
	
	set length = len $stdout
	if $ppvar < $length
		call print_program
	else
		set ppvar = 0

// --- BRAINFUCK INTERPRETER ---
func interpret
	set stdout = ""
	set list = "0"
	set number_of_indexes = 1
	set list_index = 0
	
	set prog_index = 0
	call ininterpret
func ininterpret
	set cur = $program at $prog_index

	if $cur == "<"
		if $list_index != 0 // NO IDEA HOW TO DO &&
			set list_index -= 1
	
	if $cur == ">"
		if $list_index >= $number_of_indexes
			set list += ";0"
			set number_of_indexes += 1
		set list_index += 1

	if $cur == "+"
		set itr = $list_index
		print "read BEGIN"
		call read_index
		print "read END"
		set read = $read + 1
		set itw = $list_index
		set ntw = $read
		call write_index
		set stdout += $list at 0
		
	if $cur == "-"
		set itr = $list_index
		call read_index
		set read = $read - 1
		set itw = $list_index
		set ntw = $read
		call write_index


// Must define itw (index to write) and ntw (number to write)
// Will not return anything
func write_index
	set temp_list = ""
	set ntw = $ntw as string
	set ntwindex = 0
	set ntwlength = len $ntw
	set viewed = 0
	set temp_n = 0
	set current_letter = ""
	set length = 0
	set frozen_index = -1
	set has_reajusted_fi = 0 // Bool - 1=true/0=false
	call inwriteindex
func inwriteindex
	set length = len $list

	if $temp_n < $length
		if $viewed == $itw
			if $frozen_index == -1
				set frozen_index = $viewed
			if $ntwlength > ntwindex
				set temp_list += $ntw at $ntwindex
				set ntwindex += 1
			else
				set temp_list += ";"

		elif has_reajusted_fi == 0
			if frozen_index != -1
				set ctf = ";"
				set ci = $frozen_index
				set gnstr = $list
				call get_next
				set temp_n = $next
				has_reajusted_fi = 1
				if $current_letter == ";"
					set viewed += 1
					temp_list += $current_letter
		else
			if $current_letter == ";"
				set viewed += 1
			temp_list += $current_letter
		 
		call inwriteindex

	set list = $temp_list
		

// Must declare ctf (char to find), ci (current index) and gnstr (get next string)
// Will return next, the index
func get_next
	set next = 0
	call ingetnext
func ingetnext
	set gnindex = ci + next
	set gnchar = $gnstr at $gnindex

	if $gnchar == $ctf
		set next += $ci
	else
		set next += 1
		call ingetnext	
	
	

// Must define integer itr (index to read)
// Will return read as the output
func read_index
	set viewed = 0
	set temp_n = 0
	set read = ""
	set length = len $list
	set current_letter = ""
	
	call inreadindex
	// set read = read as int
func inreadindex
	if $temp_n < $length
		set current_letter = $list at $temp_n

		// Debug
		print "Current letter: "
		print $current_letter
		print "Length: "
		print $length
		print "temp_n: "
		print $temp_n
		print "list: "
		print $list

		if $viewed == $itr
			if $current_letter != ";"
				set read += $current_letter
			else
				set temp_n = $length + 1 // Break
		else
			if $current_letter == ";"
				set viewed += 1

		set temp_n += 1

		call inreadindex


// --- START PROGRAM ---

func start_program
	call interpret
	call del
	call print_stdout
